@page "/proyecto/{ProyectoId:int}/{NominaId:int}/Pagos"
@inject IProyectoService ProyectoService
@inject IEstadoService EstadoService
@inject INominaService NominaService
@inject ITrabajoService TrabajoService
@inject IPagoService PagoService
@inject DialogService DialogService
@inject NotificationService notify
@inject IEmpleadoService EmpleadoService
@inject ICantidadService CantidadService
@inject NavigationManager NavigationManager


@try
{
    <div class="container">
        <p><a href="/" class="w3-hover-orange btn btn-primary bg-transparent w3-border-0">Proyecto</a> / <a href=@($"/proyecto/{ProyectoId}") class="w3-hover-orange btn btn-primary bg-transparent w3-border-0">@Pro.Descripcion</a> / <a href=@($"/proyecto/{ProyectoId}/{NominaId}") class="w3-hover-orange btn btn-primary bg-transparent w3-border-0">Nomina</a> / Pago</p>
        <br><br>
    </div>
    <div style="display:flex; justify-content:space-between; width:100%;">
        
        <RadzenText class="rz-color-warning-dark" TextAlign="TextAlign.Center" TextStyle="TextStyle.DisplayH5">Pagos</RadzenText>
        <span style="display:flex;">
            <RadzenButton class="w3-button w3-xlarge w3-circle w3-orange  stiky-btn w3-animate-zoom" Click=@NewPago >+</RadzenButton>
            <RadzenButton class="w3-button w3-xlarge w3-circle w3-red stiky-btn w3-animate-zoom" Click=@DeleteResponse><i class="material-icons w3-large ">delete</i></RadzenButton>
        </span>
    </div>
    <hr class="rz-color-warning">
    <br>
    <RadzenDataGrid AllowFiltering="true" AllowColumnResize="true" AllowAlternatingRows="false"
                FilterMode="FilterMode.Advanced" AllowSorting="true" AllowPaging="true"
                PagerHorizontalAlign="HorizontalAlign.Left" Data="PagoService.ListPago" TItem="Pago" ColumnWidth="200px"
                LogicalFilterOperator="LogicalFilterOperator.Or" ShowPagingSummary="true">

        <Columns>
            <RadzenDataGridColumn TItem="Pago" Width="100px" Filterable="false" Sortable="false" Frozen="true" Title="Acciones">
                <Template Context="Item">
                    <button @onclick="() => Eliminar(Item.PagoId)" class="bg-transparent w3-margin-left w3-border-0"><RadzenBadge Shade="Shade.Dark" BadgeStyle="BadgeStyle.Danger" Text="Ver"><i class="material-icons w3-large ">delete</i></RadzenBadge></button>
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="Pago" Width="100%" Property="PagoId" Title="Id#" />
            <RadzenDataGridColumn TItem="Pago" Width="100%" Property="Fecha" Title="Fecha" />
            <RadzenDataGridColumn TItem="Pago" Filterable="true" Sortable="true" Frozen="false" Title="Concepto">
                <Template Context="Item">
                    <RadzenText>@NominaService.ListNomina.SingleOrDefault(n => n.NominaId == Item.NominaId).Concepto</RadzenText>
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="Pago" Width="100%" Property="Monto" Title="Monto" />
            <RadzenDataGridColumn TItem="Pago" Width="100%" Property="Total" Title="Total" />

            
           
        </Columns>
    </RadzenDataGrid>
    
}
catch (Exception e)
{

}
@code {
    [Parameter]
    public int ProyectoId { get; set; }

    [Parameter]
    public int NominaId { get; set; }

    [Parameter]
    public int PagoId { get; set; }

    public Pago pago { get; set; } = new Pago();
    public Proyecto Pro { get; set; } = new Proyecto();
    public Nomina Nom { get; set; } = new Nomina();
    public NominaDetalle Detail = new NominaDetalle();
    protected override async Task OnInitializedAsync()
    {
        await EmpleadoService.GetList();
        await PagoService.GetList();
        await NominaService.GetList();
        var Encontrado = await ProyectoService.Find(ProyectoId);
        if (Encontrado != null)
        {
            Pro = Encontrado;

        }
    }

    async Task Buscar()
    {
        var Encontrado = await PagoService.GetPagoById(PagoId);
        if(Encontrado!= null)
        {
            this.pago = Encontrado;
        }
    }
    async Task Eliminar(int Id)
    {
        await PagoService.DeletePago(Id);
        NavigationManager.NavigateTo($"/proyecto/{ProyectoId}/{NominaId}/");
    }
    



    public async Task NewEmpleado(int Id)
    {
        await DialogService.OpenAsync<
            R_Empleado>($"Modificar Empleado",
            new Dictionary<string, object>() { { "EmpleadoId", Id } },
            new DialogOptions() { Width = "50vw", Height = "45vh", Resizable = false, Draggable = true });
    }

    async Task DeleteResponse()
    {
        var result = await DialogService.OpenAsync("Confirmar Accion", ds =>
    @<RadzenStack Gap="1.5rem">
        <RadzenStack Orientation="Orientation.Horizontal" Gap="0.5rem" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween">
            <div class="w3-margin row rz-color-white">
                <div class="align-items-center d-flex">
                    <RadzenLabel Text="Desea eliminar la nomina actual?" />
                </div>
            </div>
            <div class="w3-margin align-content-center ">
                <RadzenButton Text="Eliminar"  ButtonStyle="ButtonStyle.Danger" />
                <RadzenButton Text="Cancel" Click="() => ds.Close(false)" ButtonStyle="ButtonStyle.Light" />
            </div>
        </RadzenStack>
    </RadzenStack>);
    }

    public async Task NewPago()
    {
        await DialogService.OpenAsync<
            R_Pagos>($"Registro de pagos",
            new Dictionary<string, object>(){{"NominaId",NominaId}},
            new DialogOptions() { Width = "70vw", Height = "70vh", Resizable = false, Draggable = true });
    }

}